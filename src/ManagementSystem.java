/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PharmacyManagementSystem;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author S.m.Tahmin Kabir Raiyan
 * ID: 181-115-006
 * Department: CSE
 * Metropolitan University.
 */
public class ManagementSystem extends javax.swing.JFrame {

    JLabel imageLabel;
    ImageIcon img;
    Container c;
    TypeEnum typeEnum;
    
    public ManagementSystem() {
        
        initComponents();
        setComboBox();
        loadRows();
        //setBackground(new Color(0,0,0,0));
        
        //entryType.setBackground(Color.WHITE);
        entry.getTableHeader().setFont(new Font("Arial",Font.BOLD,14));
        entry.getTableHeader().setOpaque(false);
        //entryType.getTableHeader().setBackground(Color.WHITE);
        entry.setRowHeight(23);
        
   
        c = this.getContentPane();
        c.setLayout(null);
        
         //adding image
        img = new ImageIcon(getClass().getResource("image.jpg"));
        imageLabel = new JLabel(img);
        imageLabel.setBounds(0, 0, img.getIconWidth(), img.getIconHeight());
        c.add(imageLabel);
        
        //Icon Set
        img = new ImageIcon(getClass().getResource("image.jpg"));
        this.setIconImage(img.getImage());
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        entry = new javax.swing.JTable();
        search = new javax.swing.JButton();
        type = new javax.swing.JComboBox<>();
        productName = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        productName1 = new javax.swing.JLabel();
        weight = new javax.swing.JTextField();
        productName2 = new javax.swing.JLabel();
        productName3 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        insert = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        searchWeight = new javax.swing.JTextField();
        delete1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entry.setBackground(new java.awt.Color(0, 153, 255));
        entry.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        entry.setForeground(new java.awt.Color(255, 255, 255));
        entry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Weight", "Type", "Price/Strip (BDT)", "Entry Date", "Entry Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        entry.setToolTipText("Product List");
        entry.setAutoscrolls(false);
        entry.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        entry.setGridColor(new java.awt.Color(204, 204, 255));
        entry.setName("Pharmacy Management System"); // NOI18N
        entry.setSelectionBackground(new java.awt.Color(204, 153, 255));
        entry.setSelectionForeground(new java.awt.Color(0, 0, 0));
        entry.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        entry.getTableHeader().setReorderingAllowed(false);
        entry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(entry);
        entry.getAccessibleContext().setAccessibleName("Pharmacy Management System");

        search.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        search.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        search.setText("Search");
        search.setToolTipText("Search A Product");
        search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        type.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        type.setToolTipText("Select Medicine Type");
        type.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        type.setLightWeightPopupEnabled(false);
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        productName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        productName.setForeground(new java.awt.Color(255, 255, 255));
        productName.setText("Product Name");

        name.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        name.setText("Paracetamol");
        name.setToolTipText("Enter Product Name");

        productName1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        productName1.setForeground(new java.awt.Color(255, 255, 255));
        productName1.setText("     Weight");

        weight.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        weight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weight.setText("500mg");
        weight.setToolTipText("Enter Weight");
        weight.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightActionPerformed(evt);
            }
        });

        productName2.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        productName2.setForeground(new java.awt.Color(255, 255, 255));
        productName2.setText("Price");

        productName3.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        productName3.setForeground(new java.awt.Color(255, 255, 255));
        productName3.setText("Select Type");

        price.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        price.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        price.setText("20");
        price.setToolTipText("Enter Price");
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        insert.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        insert.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        insert.setText("Insert");
        insert.setToolTipText("Insert A Row");
        insert.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        exit.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        exit.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        exit.setText("Exit");
        exit.setToolTipText("Select Any Row And Press");
        exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enter Product Name");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("For Searching");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Click On Search");

        searchField.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchField.setText("Napa");
        searchField.setToolTipText("Enter Product Name For Searching");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        update.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        update.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        update.setText("Update");
        update.setToolTipText("Select Any Row And Press");
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Weight");

        searchWeight.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchWeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchWeight.setText("10mg");
        searchWeight.setToolTipText("Enter Product Weight For Searching");
        searchWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchWeightActionPerformed(evt);
            }
        });

        delete1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        delete1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        delete1.setText("Delete");
        delete1.setToolTipText("Select Any Row And Press");
        delete1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("@Made By S.m.Tahmin Kabir Raiyan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(productName1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productName3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productName2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(15, 15, 15)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 944, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(575, 575, 575)
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 105, 105)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(419, 419, 419)
                    .addComponent(delete1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1125, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(productName1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(productName3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(productName2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel5)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(583, Short.MAX_VALUE)
                    .addComponent(delete1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(90, 90, 90)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        //String s = type.getSelectedItem().toString();
    }//GEN-LAST:event_typeActionPerformed

    private void weightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
         
        //JOptionPane.showMessageDialog(null,"Insert Done");
        DefaultTableModel model = (DefaultTableModel)entry.getModel();
        DateTime date = new DateTime();
        
        String w = weight.getText();
        String p = price.getText();
        String last = null;
        
        int cnt = 0;
        for (int i = 0; i < w.length(); i++) {
            
            char ch = w.charAt(i);
            
            if(i<w.length()-2 && ch>='0' && ch<='9' )
               cnt++;
            else if(i==w.length()-2)
            {
               last = w.substring(w.length()-2);
            }
        }
        
        boolean bool = false,bool1 = false;
        
        if((last.contains("kg")||last.contains("ml")||last.contains("mg")||last.contains("gm")) && cnt==w.length()-2)
           bool = true;
        
        cnt = 0;
        for (int i = 0; i < p.length(); i++) {
            
            char ch = p.charAt(i);
            
            if(ch>='0' && ch<='9' )
               cnt++;
        }
        
        if(cnt == p.length())
            bool1 = true;
        
        if( name.getText().isEmpty() || weight.getText().isEmpty() || price.getText().isEmpty() || type.getSelectedItem().toString().isEmpty())
            JOptionPane.showMessageDialog(null,"Please Fill The Form Correctly!!","Info",2);
        else if(weight.getText().contains(" ") && price.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Weight And Price!!","Info",2);
        else if(weight.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Weight!!","Info",2);
        else if(price.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Price!!","Info",2);
        else if(bool == false)
           JOptionPane.showMessageDialog(null,"Invalid Weight!!","Info",2);
        else if(bool1 == false)
           JOptionPane.showMessageDialog(null,"Invalid Price!!","Info",2);
        //Same product can't be listed
        else{
        String s = name.getText().toString();
        String rep = name.getText().toString();
        String s1 = weight.getText(); 
        rep = s.replace(' ','_');
        int flag = 0;
        
        for (int i = 0; i < entry.getRowCount(); i++) {
            
            String search = model.getValueAt(i, 0).toString();
            String search1 = model.getValueAt(i, 1).toString();
            
            if((s.equals(search)&& s1.equals(search1))|| (rep.equals(search)&& s1.equals(search1)))
            {
             
             JOptionPane.showMessageDialog(null,s+" "+s1+" Is Already Exists In The List.\nYou Can Update Or Delete This Product.\n"+
                                                   "\nName: "+s+
                                                   "\nWeight: "+s1+
                                                   "\nType: "+model.getValueAt(i, 2).toString()+
                                                   "\nPrice: "+model.getValueAt(i, 3).toString()+
                                                   "\nEntry Date: "+model.getValueAt(i, 4).toString()+
                                                   "\nEntry Time: "+model.getValueAt(i, 5).toString(),"Info",2);
             flag = 1;
             break;
            }
        }
        if(flag == 0)
        { 
            //String s = name.getText();
            //String newS = s.replace(" ", "_");
        
            model.addRow(new Object[]{ 
            name.getText(),
            weight.getText(),
            type.getSelectedItem(),
             price.getText(),
             date.getDate(),
             date.getTime()
             });
            
            
        name.setText("");
        weight.setText("");
        price.setText("");
        type.setSelectedItem(null);
        
       
        
       
        
        
        //File Write
        
        String loc = "Files\\MainFile.txt";
        File file = new File(loc);
        
        try
        {
           if(!file.exists())
               file.createNewFile();
            FileWriter fw = new FileWriter(loc,true);
            
            BufferedWriter bfw = new BufferedWriter(fw);
              
                    
            int rowNumber = entry.getRowCount();
            
            rowNumber-=1;
            
            
            
            for (int i = 0; i < entry.getColumnCount(); i++) 
            {
                String x = entry.getValueAt(rowNumber, i).toString();
                String rev = x.replace(' ', '_');
                fw.append(rev+" ");
            }
            bfw.newLine();
            bfw.close();
            fw.close();
            JOptionPane.showMessageDialog(null,"Successfully Added To The List!!","Confirmation Message",1);
            
        } catch (IOException ex) {
            Logger.getLogger(ManagementSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
     }     
    }//GEN-LAST:event_insertActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
       
    
            if(JOptionPane.showConfirmDialog (null, "Are you sure?","Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              System.exit(0);
              }
           
       
    }//GEN-LAST:event_exitActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        
    }//GEN-LAST:event_searchFieldActionPerformed

    private void entryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entryMouseClicked
       
        DefaultTableModel model = (DefaultTableModel)entry.getModel();
        boolean click = entry.isEditing();
         
        if(click==false )
        {
        //JOptionPane.showMessageDialog(null,"       Please Click On,\n Delete Button For Deleting\nUpdate Button For Updating","Info",1);
          
        
        int rowNum = entry.getSelectedRow();
        
        String up_name = model.getValueAt(rowNum, 0).toString();
        String up_weight = model.getValueAt(rowNum, 1).toString();
        Object up_type = model.getValueAt(rowNum, 2);
        String up_price = model.getValueAt(rowNum, 3).toString();
 
        
        name.setText(up_name);
        weight.setText(up_weight);
        type.setSelectedItem(up_type);
        price.setText(up_price);
        
        }
        
    }//GEN-LAST:event_entryMouseClicked

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
       
        DefaultTableModel model = (DefaultTableModel)entry.getModel();
        
        String s = searchField.getText().toString();
        String rep = searchField.getText().toString();
        String s1 = searchWeight.getText(); 
        rep = s.replace(' ','_');
        int flag = 0;
        
        if(searchField.getText().isEmpty() || searchWeight.getText().isEmpty())
          JOptionPane.showMessageDialog(null,"Please Fill The Search Form Properly!!","Info",2);
        else if(searchWeight.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Weight!!","Info",2);
        else
        {
            
        for (int i = 0; i < entry.getRowCount(); i++) {
            
            String search = model.getValueAt(i, 0).toString();
            String search1 = model.getValueAt(i, 1).toString();
            
            if((s.equals(search)&& s1.equals(search1))|| (rep.equals(search)&& s1.equals(search1)))
            {
             
             JOptionPane.showMessageDialog(null,s+" Found!!\n"+
                                                   "\nName: "+s+
                                                   "\nWeight: "+s1+
                                                   "\nType: "+model.getValueAt(i, 2).toString()+
                                                   "\nPrice: "+model.getValueAt(i, 3).toString()+
                                                   "\nEntry Date: "+model.getValueAt(i, 4).toString()+
                                                   "\nEntry Time: "+model.getValueAt(i, 5).toString(),"Product Found",1);
             flag = 1;
             break;
            }
        }
        if(flag==0)
            JOptionPane.showMessageDialog(null,s+" "+s1+" Is Not Present In The List!!","Product Not Found",1);
        
        searchField.setText("");
        searchWeight.setText("");
        }
    }//GEN-LAST:event_searchActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        
        DefaultTableModel model = (DefaultTableModel)entry.getModel();
        DateTime date = new DateTime();
        
         String w = weight.getText();
        String p = price.getText();
        String last = null;
        
        int cnt = 0;
        for (int i = 0; i < w.length(); i++) {
            
            char ch = w.charAt(i);
            
            if(i<w.length()-2 && ch>='0' && ch<='9' )
               cnt++;
            else if(i==w.length()-2)
            {
               last = w.substring(w.length()-2);
            }
        }
        
        boolean bool = false,bool1 = false;
        
        if((last.contains("kg")||last.contains("ml")||last.contains("mg")||last.contains("gm")) && cnt==w.length()-2)
           bool = true;
        
        cnt = 0;
        for (int i = 0; i < p.length(); i++) {
            
            char ch = p.charAt(i);
            
            if(ch>='0' && ch<='9' )
               cnt++;
        }
        
        if(cnt == p.length())
            bool1 = true;
        
        
        if( name.getText().isEmpty() || weight.getText().isEmpty() || price.getText().isEmpty() || type.getSelectedItem().toString().isEmpty())
            JOptionPane.showMessageDialog(null,"Please Fill The Form Correctly!!","Info",2);
        else if(weight.getText().contains(" ") && price.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Weight And Price!!","Info",2);
        else if(weight.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Weight!!","Info",2);
        else if(price.getText().contains(" "))
            JOptionPane.showMessageDialog(null,"Please Remove Space From Price!!","Info",2);
        else if(bool == false)
           JOptionPane.showMessageDialog(null,"Invalid Weight!!","Info",2);
        else if(bool1 == false)
           JOptionPane.showMessageDialog(null,"Invalid Price!!","Info",2);
        else{
        String s = name.getText().toString();
        String rep = name.getText().toString();
        String s1 = weight.getText(); 
        String s2 = type.getSelectedItem().toString();
        String s3 = price.getText().toString();
        rep = s.replace(' ','_');
        int flag = 0;
        
        for (int i = 0; i < entry.getRowCount(); i++) {
            
            if(entry.getSelectedRow()==i)
                continue;
            String search = model.getValueAt(i, 0).toString();
            String search1 = model.getValueAt(i, 1).toString();
            String search2 = model.getValueAt(i, 2).toString();
            String search3 = model.getValueAt(i, 3).toString();
            
            if(((s.equals(search)&& s1.equals(search1))|| (rep.equals(search)&& s1.equals(search1))) 
                    && s2.equals(search2) && s3.equals(search3))
            {
             
             JOptionPane.showMessageDialog(null,s+" Is Already Exists In The List."+
                                                   "\nName: "+s+
                                                   "\nWeight: "+s1+
                                                   "\nType: "+model.getValueAt(i, 2).toString()+
                                                   "\nPrice: "+model.getValueAt(i, 3).toString()+
                                                   "\nEntry Date: "+model.getValueAt(i, 4).toString()+
                                                   "\nEntry Time: "+model.getValueAt(i, 5).toString(),"Info",2);
             name.setText("");
             weight.setText("");
             price.setText("");
             type.setSelectedItem(null);
              
             flag = 1;
             break;
            }
        }
        if(flag == 0)
        {
            
        //String s = name.getText();
        //String newS = s.replace(" ", "_");
        
        model.setValueAt(name.getText(), entry.getSelectedRow(), 0);
         model.setValueAt(weight.getText(), entry.getSelectedRow(), 1);
           model.setValueAt(type.getSelectedItem().toString(), entry.getSelectedRow(), 2);
           model.setValueAt(price.getText(), entry.getSelectedRow(), 3);
            model.setValueAt(date.getDate(), entry.getSelectedRow(), 4);
             model.setValueAt(date.getTime(), entry.getSelectedRow(), 5);
             
              name.setText("");
              weight.setText("");
              price.setText("");
              type.setSelectedItem(null);
              
               String loc = "Files\\MainFile.txt";
                   File file = new File("Files\\MainFile.txt");
                   
                 file.delete();
             try{
                 
             file.createNewFile();
              
            try (FileWriter fw = new FileWriter(loc,true); 
                    BufferedWriter bfw = new BufferedWriter(fw)) {
            
                
                
                for (int i = 0; i < entry.getRowCount(); i++) {
                    
                    for (int j = 0; j < entry.getColumnCount(); j++)
                    {
                        String x = model.getValueAt(i, j).toString();
                        String rev = x.replace(' ', '_');
                        fw.append(rev+ " ");
                        
                    }
                    fw.append("\n");
                }
                
            }
            JOptionPane.showMessageDialog(null,"Successfully Updated To The List!!","Confirmation Message",1);
            
        } catch (IOException ex) {
            Logger.getLogger(ManagementSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
      }
    }//GEN-LAST:event_updateActionPerformed

    private void searchWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchWeightActionPerformed

    private void delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete1ActionPerformed
         
        DefaultTableModel model = (DefaultTableModel)entry.getModel();
        
        int rowNum = entry.getSelectedRow();
        
        if(rowNum>=0)
        {
          model.removeRow(rowNum);
        }
        
        
        String loc = "Files\\MainFile.txt";
                   File file = new File("Files\\MainFile.txt");
                   
                 file.delete();
             try{
                 
             file.createNewFile();
              
            try (FileWriter fw = new FileWriter(loc,true); 
                    BufferedWriter bfw = new BufferedWriter(fw)) {
            
                
                
                for (int i = 0; i < entry.getRowCount(); i++) {
                    
                    for (int j = 0; j < entry.getColumnCount(); j++)
                    {
                        String x = model.getValueAt(i, j).toString();
                        String rev = x.replace(' ', '_');
                        fw.append(rev+ " ");
                        
                    }
                    fw.append("\n");
                }
                
            }
            JOptionPane.showMessageDialog(null,"Successfully Deleted From The List!!","Confirmation Message",1);
            
        } catch (IOException ex) {
            Logger.getLogger(ManagementSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delete1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ManagementSystem().setVisible(true);
                /*ManagementSystem ms = new ManagementSystem();
                ms.setTitle("Pharmacy Management System");
                ms.setVisible(true);*/
                FirstFrame frame = new FirstFrame();
                frame.setVisible(true);
                frame.setResizable(false);
                frame.setTitle("Welcome Pharmacy Management System");
                frame.setBounds(450, 200, 550, 350); //dis from left,dis from top,weidth,height
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete1;
    private javax.swing.JTable entry;
    private javax.swing.JButton exit;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField name;
    private javax.swing.JTextField price;
    private javax.swing.JLabel productName;
    private javax.swing.JLabel productName1;
    private javax.swing.JLabel productName2;
    private javax.swing.JLabel productName3;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField searchWeight;
    private javax.swing.JComboBox<TypeEnum> type;
    private javax.swing.JButton update;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables
   
   private void setComboBox()
   {
     type.setModel(new DefaultComboBoxModel<>(TypeEnum.values()));
   }

    private void loadRows() {
        String loc = "Files\\MainFile.txt";
                   File file = new File(loc);
                   
                   try{
                       FileReader fr = new FileReader(file);
                       BufferedReader br = new BufferedReader(fr);
                       
                        DefaultTableModel model = (DefaultTableModel)entry.getModel();
                        Object[] lines = br.lines().toArray();
                        for (int i = 0; i < lines.length; i++) {
                           String[] row = lines[i].toString().split(" "); 
                           model.addRow(row);
                       }
                       
                   } catch (FileNotFoundException ex) {
            Logger.getLogger(ManagementSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
                   
        type.setModel(new DefaultComboBoxModel<>(TypeEnum.values()));
    }
}
